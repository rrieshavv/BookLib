// <auto-generated />
using System;
using BookLib.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BookLib.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250503083110_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.Property<Guid>("authorsauthor_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("booksbook_id")
                        .HasColumnType("uuid");

                    b.HasKey("authorsauthor_id", "booksbook_id");

                    b.HasIndex("booksbook_id");

                    b.ToTable("AuthorBook");
                });

            modelBuilder.Entity("BookGenre", b =>
                {
                    b.Property<Guid>("booksbook_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("genresgenre_id")
                        .HasColumnType("uuid");

                    b.HasKey("booksbook_id", "genresgenre_id");

                    b.HasIndex("genresgenre_id");

                    b.ToTable("BookGenre");
                });

            modelBuilder.Entity("BookLib.Infrastructure.Data.Entities.Author", b =>
                {
                    b.Property<Guid>("author_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("author_id");

                    b.ToTable("authors");
                });

            modelBuilder.Entity("BookLib.Infrastructure.Data.Entities.Book", b =>
                {
                    b.Property<Guid>("book_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("created_by")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("created_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("format")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("is_on_sale")
                        .HasColumnType("boolean");

                    b.Property<string>("isbn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("language")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("price")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("publication_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("stock_qty")
                        .HasColumnType("integer");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("updated_by")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("updated_date")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("book_id");

                    b.ToTable("books");
                });

            modelBuilder.Entity("BookLib.Infrastructure.Data.Entities.Genre", b =>
                {
                    b.Property<Guid>("genre_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("genre_id");

                    b.ToTable("genres");
                });

            modelBuilder.Entity("BookLib.Infrastructure.Data.Entities.Publisher", b =>
                {
                    b.Property<Guid>("publisher_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("publisher_id");

                    b.ToTable("publishers");
                });

            modelBuilder.Entity("BookLib.Infrastructure.Data.Entities.User", b =>
                {
                    b.Property<Guid>("user_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("address")
                        .HasColumnType("text");

                    b.Property<string>("city")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("country")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("firstname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("lastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("mobile")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("registration_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("role")
                        .HasColumnType("integer");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("user_id");

                    b.HasIndex("email");

                    b.HasIndex("mobile");

                    b.HasIndex("username");

                    b.ToTable("users");
                });

            modelBuilder.Entity("BookPublisher", b =>
                {
                    b.Property<Guid>("booksbook_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("publisherspublisher_id")
                        .HasColumnType("uuid");

                    b.HasKey("booksbook_id", "publisherspublisher_id");

                    b.HasIndex("publisherspublisher_id");

                    b.ToTable("BookPublisher");
                });

            modelBuilder.Entity("AuthorBook", b =>
                {
                    b.HasOne("BookLib.Infrastructure.Data.Entities.Author", null)
                        .WithMany()
                        .HasForeignKey("authorsauthor_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookLib.Infrastructure.Data.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("booksbook_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookGenre", b =>
                {
                    b.HasOne("BookLib.Infrastructure.Data.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("booksbook_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookLib.Infrastructure.Data.Entities.Genre", null)
                        .WithMany()
                        .HasForeignKey("genresgenre_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookPublisher", b =>
                {
                    b.HasOne("BookLib.Infrastructure.Data.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("booksbook_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookLib.Infrastructure.Data.Entities.Publisher", null)
                        .WithMany()
                        .HasForeignKey("publisherspublisher_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
